[gd_resource type="Shader" format=3 uid="uid://c8mf2oywgrqpd"]

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform vec2 aspect_ratio=vec2(1.0);

uniform vec2 origin=vec2(0);
uniform float a_space=0.0;
uniform vec2 ant1_pos = vec2(0);
uniform float ant1_enabled=1.0;
uniform float ant1_amplitude:hint_range(0.0,1.0,0.1)=1.0;
uniform float ant1_phase:hint_range(-360.0,360,0.1)=0.0;

uniform vec2 ant2_pos=vec2(0);
uniform float ant2_enabled=1.0;
uniform float ant2_phase:hint_range(-360.0,360.0,0.1)=0.0;
uniform float ant2_amplitude:hint_range(0.0,1.0,0.1)=1.0;

uniform vec2 ant3_pos=vec2(0);
uniform float ant3_enabled=1.0;
uniform float ant3_phase:hint_range(-360.0,360.0,0.1)=0.0;
uniform float ant3_amplitude:hint_range(0.0,1.0,0.1)=1.0;

uniform vec2 ant4_pos=vec2(0);
uniform float ant4_enabled=1.0;
uniform float ant4_phase:hint_range(-360.0,360.0,0.1)=0.0;
uniform float ant4_amplitude:hint_range(0.0,1.0,0.1)=0.0;

uniform float timer;
uniform float freq=3.0;
uniform float carrier_freq=1.0;
uniform float zoom:hint_range(0.5,20)=1.0;
uniform float time_shift=0;
uniform bool overlay=false;
uniform bool hide_below_ground=false;
uniform bool phase_mode=false;
uniform bool diagram_mode=false;
uniform bool show_vor_circle=false;

vec2 uv_to_graph(vec2 value)
{
	vec2 offset=vec2(0.5, 0.5);
	return ((value-offset)*aspect_ratio*zoom+origin)*vec2(1,-1);
}

float intensity_from(vec2 antenna_position, vec2 field_position, float phase)
{
	if (hide_below_ground && field_position.y<0.0)
		return 0.0;


	float dist= distance(field_position, antenna_position);
	float intensity=sin(freq * dist * TAU - radians(phase) - (timer)+time_shift);
	return intensity;
}

float phase_from(vec2 antenna_position, vec2 field_position, float phase_offset)
{
	float dist= distance(field_position, antenna_position);//length(direction);
	float phase=(freq * dist * TAU - radians(phase_offset) - (timer)+time_shift);
	return phase;
}

vec2 phasor_from(vec2 antenna_position, vec2 field_position, float phase_offset)
{
	float phase=phase_from(antenna_position, field_position, phase_offset);
	return vec2(cos(phase), sin(phase));
}

vec4 hsv_to_rgb(float h, float s, float v, float a)
{
    vec3 RGB;
	h=clamp(h,0.0,1.0);
	s=clamp(s, 0.0, 1.0);
	v=clamp(v, 0.0, 1.0);
	a=clamp(a, 0.0, 1.0);
    if ( s != 0.0 ) {
       float var_h = h * 6.0;
       float var_i = floor(var_h);   // Or ... var_i = floor( var_h )
       float var_1 = v * (1.0 - s);
       float var_2 = v * (1.0 - s * (var_h-var_i));
       float var_3 = v * (1.0 - s * (1.0-(var_h-var_i)));
       if      (var_i == 0.0) { RGB = vec3(v, var_3, var_1); }
       else if (var_i == 1.0) { RGB = vec3(var_2, v, var_1); }
       else if (var_i == 2.0) { RGB = vec3(var_1, v, var_3); }
       else if (var_i == 3.0) { RGB = vec3(var_1, var_2, v); }
       else if (var_i == 4.0) { RGB = vec3(var_3, var_1, v); }
       else                 { RGB = vec3(v, var_1, var_2); }
   }
	RGB=clamp(RGB, vec3(0), vec3(1));
   return vec4(RGB,a);
}

float filled_circle(vec2 dot_pos, vec2 world_pos,float radius)
{
	vec2 position=dot_pos-world_pos;
	return 1.0-smoothstep(radius, radius + 0.001, dot(position, position) * 4.0);
}

float circle(vec2 center, vec2 world_pos, float radius, float thickness)
{
	thickness/=2.0;
	float dist=distance(center, world_pos);
	dist = min(dist, 2.0 * radius - dist);
	return smoothstep(radius-thickness, radius-thickness/2.0, dist);
}

void fragment(){
	vec2 world_pos = uv_to_graph(UV.xy);
	float ant_enabled=ant1_enabled+ant2_enabled+ant3_enabled+ant4_enabled;

	float total_enabled=max(ant_enabled,1.75);
	float amp_share = 1.0/total_enabled;

	COLOR=mix(COLOR,vec4(0.95, 0.611, 0.06,1), circle(vec2(0), world_pos, 1.0, 0.01));
	COLOR=mix(COLOR,vec4(0.95, 0.611, 0.06,1), circle(vec2(0), world_pos, 2.0, 0.01));
	COLOR=mix(COLOR,vec4(0.95, 0.611, 0.06,1), circle(vec2(0), world_pos, 3.0, 0.01));

	if (phase_mode)
	{
		vec2 ant1=phasor_from(ant1_pos, world_pos, ant1_phase) * ant1_amplitude * ant1_enabled;
		vec2 ant2=phasor_from(ant2_pos, world_pos, ant2_phase) * ant2_amplitude * ant2_enabled;
		vec2 ant3=phasor_from(ant3_pos, world_pos, ant3_phase) * ant3_amplitude * ant3_enabled;
		vec2 ant4=phasor_from(ant4_pos, world_pos, ant4_phase) * ant4_amplitude * ant4_enabled;
		//vec2 time_phasor = phasor_from(vec2(0,0), world_pos, 0);

		vec2 total_phasor=ant1 + ant2 + ant3 + ant4;
		float total_phase=atan(total_phasor.y,total_phasor.x) + TAU;
		float val = total_phase / PI;

		COLOR=hsv_to_rgb(mod(total_phase, TAU)/ TAU, 1.0, 1.0, length(total_phasor));

	}
	else if (diagram_mode)
	{
		float theta=mod(atan(world_pos.y, world_pos.x) + TAU, TAU);

		float d=length(world_pos);
		float pr = a_space * sin(theta);

		float x = ant1_amplitude * cos(radians(ant1_phase + pr)) + ant2_amplitude * cos(radians(ant2_phase - pr));
		float y = ant1_amplitude * sin(radians(ant1_phase + pr)) + ant2_amplitude * sin(radians(ant2_phase - pr));
		float b = mod(atan(y, x) + TAU - radians(ant1_phase+ant2_phase)/2.0, TAU);

		float r = sqrt(pow(x, 2) + pow(y, 2));

		float show= d <=r ? 1.0 : 0.0;

		COLOR=hsv_to_rgb(b/TAU, 1.0, show, show);
	}
	else
	{
		float ant1 = intensity_from(ant1_pos, world_pos, ant1_phase) * ant1_amplitude * ant1_enabled / total_enabled;
		float ant2 = intensity_from(ant2_pos, world_pos, ant2_phase) * ant2_amplitude * ant2_enabled / total_enabled;
		float ant3 = intensity_from(ant3_pos, world_pos, ant3_phase) * ant3_amplitude * ant3_enabled / total_enabled;
		float ant4 = intensity_from(ant4_pos, world_pos, ant4_phase) * ant4_amplitude * ant4_enabled / total_enabled;
		float total= ant1 + ant2 + ant3 + ant4;
		//	total=total/total_enabled;
		if (overlay)
			COLOR=vec4(-min(0,ant1)-min(0,ant2)-min(0,ant3)-min(0,ant4),0,
						max(0,ant1)+max(0,ant2)+max(0,ant3)+max(0,ant4),1);
		else
			COLOR = vec4(-total,step(0.999,abs(total)),total,1);

	}

	COLOR=mix(COLOR,vec4(1,0,1,1),filled_circle(ant1_pos,world_pos,0.0001) * ant1_enabled);
	COLOR=mix(COLOR,vec4(0,1,1,1),filled_circle(ant2_pos,world_pos,0.0001) * ant2_enabled);
	COLOR=mix(COLOR,vec4(1,1,0,1),filled_circle(ant3_pos,world_pos,0.0001) * ant3_enabled);
	COLOR=mix(COLOR,vec4(1,1,1,1),filled_circle(ant4_pos,world_pos,0.0001) * ant4_enabled);
	if (show_vor_circle)
		COLOR=mix(COLOR,vec4(0.95, 0.611, 0.06,1), circle(vec2(0), world_pos, 3.0, 0.1));


}"
